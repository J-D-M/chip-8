#include "./chip8.hpp"

#include <fstream>
#include <iostream>

namespace chip8
{
// font sprites
constexpr unsigned char fontset[80] = {
	0xF0, 0x90, 0x90, 0x90, 0xF0,  // 0
	0x20, 0x60, 0x20, 0x20, 0x70,  // 1
	0xF0, 0x10, 0xF0, 0x80, 0xF0,  // 2
	0xF0, 0x10, 0xF0, 0x10, 0xF0,  // 3
	0x90, 0x90, 0xF0, 0x10, 0x10,  // 4
	0xF0, 0x80, 0xF0, 0x10, 0xF0,  // 5
	0xF0, 0x80, 0xF0, 0x90, 0xF0,  // 6
	0xF0, 0x10, 0x20, 0x40, 0x40,  // 7
	0xF0, 0x90, 0xF0, 0x90, 0xF0,  // 8
	0xF0, 0x90, 0xF0, 0x10, 0xF0,  // 9
	0xF0, 0x90, 0xF0, 0x90, 0x90,  // A
	0xE0, 0x90, 0xE0, 0x90, 0xE0,  // B
	0xF0, 0x80, 0x80, 0x80, 0xF0,  // C
	0xE0, 0x90, 0x90, 0x90, 0xE0,  // D
	0xF0, 0x80, 0xF0, 0x80, 0xF0,  // E
	0xF0, 0x80, 0xF0, 0x80, 0x80,  // F
};
// constructor
emulator::emulator()
    : memory(0x1000, 0),
      v(0x10, 0),
      stack(0x10),
      gfx(32, std::vector< bool >(64)),
      op_code{ 0 },
      index_register{ 0 },
      program_counter{ 0x200 },
      stack_pointer{ 0 },
      delay_timer{ 0 },
      sound_timer{ 0 }

{
	std::srand(std::time(nullptr));

	clear_screen();

	for (size_t i = 0; i < 80; i++) {
		memory[0x50 + i] = fontset[i];
	}
}

// return graphics buffer
auto
emulator::get_gfx() -> std::vector< std::vector< bool > >
{
	return gfx;
}

auto
emulator::load(const std::string_view &file_path) -> bool
{
	auto game_file{ std::ifstream(file_path.data(), std::ios::binary) };

	if (!game_file) {
		return false;
	}

	for (size_t i{ 0x200 }; game_file.peek() != EOF; i++) {
		memory[i] = game_file.get();
	}

	return true;
}

};  // namespace chip8
