#include "../header/emulator.hpp"

#include <fstream>

namespace chip8
{
constexpr unsigned char fontset[80] = {
	0xF0, 0x90, 0x90, 0x90, 0xF0,  // 0
	0x20, 0x60, 0x20, 0x20, 0x70,  // 1
	0xF0, 0x10, 0xF0, 0x80, 0xF0,  // 2
	0xF0, 0x10, 0xF0, 0x10, 0xF0,  // 3
	0x90, 0x90, 0xF0, 0x10, 0x10,  // 4
	0xF0, 0x80, 0xF0, 0x10, 0xF0,  // 5
	0xF0, 0x80, 0xF0, 0x90, 0xF0,  // 6
	0xF0, 0x10, 0x20, 0x40, 0x40,  // 7
	0xF0, 0x90, 0xF0, 0x90, 0xF0,  // 8
	0xF0, 0x90, 0xF0, 0x10, 0xF0,  // 9
	0xF0, 0x90, 0xF0, 0x90, 0x90,  // A
	0xE0, 0x90, 0xE0, 0x90, 0xE0,  // B
	0xF0, 0x80, 0x80, 0x80, 0xF0,  // C
	0xE0, 0x90, 0x90, 0x90, 0xE0,  // D
	0xF0, 0x80, 0xF0, 0x80, 0xF0,  // E
	0xF0, 0x80, 0xF0, 0x80, 0x80,  // F
};

emulator::emulator(gfx &g, keypad &k) :
    memory{ 0 },
    v{ 0 },
    stack{ 0 },
    i_register{ 0 },
    pc{ 0x200 },
    sp{ 0 },
    d_timer{ 0 },
    s_timer{ 0 },
    gfx_buf{ g },
    k_pad{ k }
{
}

auto
emulator::load(const std::string &path) -> bool
{
	auto fs{ std::ifstream(path, std::ios::binary) };
	if (!fs) {
		return false;
	}

	for (size_t i{ 0x200 }; fs.peek() != EOF; ++i)
		memory[i] = fs.get();

	for (size_t i{ 0 }; i < 80; i++) {
		memory[i] = fontset[i];
	}

	return true;
}

}  // namespace chip8
